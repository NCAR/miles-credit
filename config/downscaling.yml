# yaml file for the conus404 dataset

#---------------------
# CONUS404 data is (assumed to be) hourly data stored in daily netcdf
# files organized by year.  Each file contains 24 timesteps and all
# variables of the appropriate dimensionality.  Data has been
# compressed with lossy compression, and is chunked so that each file
# is a single chunk (i.e., 1 chunk = all space, 24 timesteps).
# 
# Naming convention: $path/YYYY/conus404.Nd.YYYY-MM-DD.nc
#
# data is normalized (using functions in transforms.py) in the
# dataloader in applications/train.py; no need for users to normalize
# them by hand.
#---------------------

# the location to save your workspace, it will have (1) pbs script,
# (2) a copy of this config, (3) model weights, (4) training_log.csv
# if save_loc does not exist, it will be created automatically

save_loc: /glade/work/$USER/CREDIT_runs/c404/
seed: 2222  # RNG seed


## To avoid errors / incompatibilities, declare options that are used
## repeatedly once, at the top level where they apply, and inherit
## them at the levels where they are used using the <<: pattern.  We
## could propagate configuration info downward in code, but inheriting
## it here dramatically simplifies things.

sampling: &samples
    history_len:  1   # for now, downscaling trainer only handles 1/1
    forecast_len: 1

    
# A downscaling model is trained on two datasets, one for the
# high-resolution output from the model being emulated, and one for
# the low-resolution driving data (boundary conditions coming from a
# reanalysis or GCM).  All data needs to have the same dimensions in X
# & Y, so we interpolate the low-res data onto a coarsened version of
# the high-res grid, then apply the 'expand' and 'pad' transforms to
# stretch it out to match the actual high-res grid.  This saves us
# from needing to store a high-res of the driver data that would be
# 25x bigger and blow up our scratch quota.  (We don't need to worry
# about the Z dimension because it gets concatenated along the
# 'variable' dimension; i.e., different levels of a 3D variable are
# treated as different variables.)

# 'boundary' variables are input-only, used in both training and
#  inference

# 'diagnostic' variables are output-only

# 'prognostic' variables are input-output; the value predicted as an
#  output for time T is recycled as an input for predicting time T+1 in
#  inference

# 'unused' variables don't actually need to be listed in the yaml
# file, they're just here for reference and convenience when changing
#  around the model configuration

# listing variables in the order they appear in the netcdf file should
# result in faster reads from disk.  By default, NCO commands that
# rewrite their outputs alphabetize variables.


# The 'data', 'dataset', and 'transforms' sections below are used to
# initialize DownscalingDataset, DataMap, and DataTransform objects,
# respectively.  You pass **config['data'] (etc.) to the constructor,
# so the options here correspond to constructor arguments.

data_defaults: &ddefault
    <<: *samples

    # file globs are defined relative to the top-level data rootpath
    rootpath: /glade/derecho/scratch/mcginnis/credit

    first_date:   "1980-01-02"  ## first timestep of CONUS404 is bad
    last_date:    "2021-12-31"

    # note: first_date and last_date must be quoted so that they
    # remain strings; otherwise the yaml parser converts them to
    # datetime objects, which can't handle non-standard GCM calendars.



data:
    <<: *ddefault

    datasets:
        ## hires component:
        ## CONUS404 data on native 4km grid; hourly, 1979-10 to 2022-09

        ## static WRF fields extracted from 'wrfconstants_usgs404.nc'
        conus404_static:
            <<: *ddefault
            glob: 'conus404/conus404.static.nc'
            dim: static
            normalize: True   # scale min,max == [0,1] iff dim = static
            variables:
                boundary:
                    - COSALPHA  # local cosine of map rotation
                    - E         # coriolis cosine latitude term
                    - F         # coriolis sine latitude term
                    - HGT       # terrain height / orography
                    - LANDMASK  # land/sea mask (0=water, 1=land)
                    - SINALPHA  # local sine of map rotation
                    - VAR       # orographic variance
                    - VAR_SSO   # variance of subgrid-scale orography
                unused:
                    - XLAT      # latitude
                    - XLONG     # longitude
            transforms:
                default: none


        ## NOTE that U and V are on staggered grids that are 1 larger in
        ## the x- and y- dimensions (respectively) than the other
        ## variables; they have been trimmed by 1 on the western and
        ## southern edges (respectively) to match the dimensionality of
        ## the non-staggered grids.

        conus404_3D:
            <<: *ddefault
            glob: 'conus404/3d/*/conus404.3d.*.nc'
            dim: 3D
            variables:
                prognostic:
                    - P       # total pressure (dataset uses hybrid sigma coordinates)
                    - QVAPOR  # water vapor mixing ratio
                    - TK      # air temperature
                    - U       # U-component of wind *with respect to model grid*
                    - V       # V-component of wind *with respect to model grid*
                diagnostic:
                    - Z       # geopotential height
            transforms:
                paramfiles:
                    mmin: 'norms/min.conus404_3d.nc'
                    mmax: 'norms/max.conus404_3d.nc'
                default:
                    minmax: paramfile


        conus404_2D:
            <<: *ddefault
            glob: 'conus404/2d/*/conus404.2d.*.nc'
            dim: 2D
            variables:
                boundary:
                    - COSZEN  # cosine of solar zenith angle
                prognostic:
                    - PSFC    # surface pressure
                    - Q2      # water vapor mixing ratio at 2 meters
                    - T2      # 2-meter air temperature
                    - TD2     # 2-d dewpoint temperature
                    - U10     # u-wind at 10 meters
                    - V10     # v-wind at 10 meters
                diagnostic:
                    - PREC_ACC_NC # total precip (mm) over previous (1-hr) timestep
                    - SWDNB       # shortwave downwelling at bottom (instantaneous)
                    - totalVap    # column-integrated water vapor content
                unused:
                    - SNOW       # snow water equivalent
            transforms:
                paramfiles:
                    mmin: 'norms/min.conus404_2d.nc'
                    mmax: 'norms/max.conus404_2d.nc'
                default:
                    minmax: paramfile
                PREC_ACC_NC:
                    clip:
                        cmin: 0
                    minmax: paramfile
                    power:
                        exponent: 0.25



        ## lores component:
        ## driving ERA5 & TOA solar data on coarsened version of CONUS404 grid

        ## insolation data calculated using miles-credit applications
        ## script calc_global_solar.py, regridded to coarsened
        ## CONUS404 grid; hourly, 1979-2024

        solar:
            <<: *ddefault
            glob: 'solar/tisr.20km.*.nc'
            dim: 2D
            variables:
                boundary:
                    - tisr      # TOA incident solar radiation (J/m^2, integral dt)
            transforms:
                paramfiles:
                    mmin: 'norms/min.solar.nc'
                    mmax: 'norms/max.solar.nc'
                tisr:
                    minmax: paramfile
                    expand:
                        by: 5
                    pad:
                        left: 1
                        right: 1


          ## ERA5 data regridded to coarsened CONUS404 grid.  Source
          ## data is interpolated to pressure levels and global 0.25
          ## degree grid.  (Variables are in alphabetical order except
          ## for R, which is last.)  hourly, 1979-2023

        era5_3D:
            <<: *ddefault
            glob: 'era5/3d/*/era5.3d.*.nc'
            dim: 3D
            zstride: 3
            variables:
                boundary:
                    - T   # temperature
                    - U   # u-winds
                    - V   # v-winds
                    - Z   # geopotential
                    - R   # humidity
            transforms:
                paramfiles:
                    mmin: 'norms/min.era5_3d.nc'
                    mmax: 'norms/max.era5_3d.nc'
                default:
                    minmax: paramfile
                    expand:
                        by: 5
                    pad:
                        left: 1
                        right: 1

        era5_2D:
            <<: *ddefault
            glob: 'era5/2d/*/era5.2d.*.nc'
            dim: 2D
            variables:
                boundary:
                    - SP       # surface pressure
                    - MSL      # mean sea-level pressure
                    - VAR_2T   # 2-meter temperature
                    - TCWV     # total column water vapor
                    - VAR_10U  # 10-meter u-wind
                    - VAR_10V  # 10-meter v-wind
            transforms:
                paramfiles:
                    mmin: 'norms/min.era5_2d.nc'
                    mmax: 'norms/max.era5_2d.nc'
                default:
                    minmax: paramfile
                    expand:
                        by: 5
                    pad:
                        left: 1
                        right: 1


model:
    type: "crossformer_downscaling"
    image_height: 1015
    image_width: 1367
    frames: 2
    architecture:
        name: "unet"
        encoder_name: "resnet34"
        encoder_weights: "imagenet"

trainer:
    <<: *samples  # history_len, forecast_len
    type: "conus404"
    mode: ddp # none, ddp, fsdp
    train_batch_size: 4
    valid_batch_size: 4
    batches_per_epoch: 10 # Set to 0 to use len(dataloader)
    valid_batches_per_epoch: 100
    learning_rate: 1.0e-04
    weight_decay: 1.0e-05
    start_epoch: 0
    epochs: 4  # 30 years hourly = 262,980; 66 x 1000-batch epoch =~ 1 full pass
    amp: False
    grad_accum_every: 1
    grad_max_norm: 1.0
    thread_workers: 4
    valid_thread_workers: 0
    stopping_patience: 50
    teacher_forcing_ratio: 0.5 #0.9886539666794065
    stop_rollout: 0.9
    skip_validation: True
    load_weights: False
    load_optimizer: False
    use_scheduler: False
    update_learning_rate: True
    scheduler: {'scheduler_type': 'lambda'}


loss:
   training_loss: "mse"
   use_vgg: False
   use_spectral_loss: False
   spectral_wavenum_init: 15
   spectral_lambda_reg: 0.025791372491084097
   use_latitude_weights: False
   use_variable_weights: False
   latitude_weights: False


predict:
    start: "2017-11-01"
    finish: "2017-11-10"
#    finish: "2022-09-30"
    autoregressive: False
    use_laplace_filter: False
    save_format: "nc"


#visualization:
#    surface_visualize:
#        variable_keys: ['U10','U1000','U250','U500','U850','V10','V1000','V250','V500','V850']
#        variable_names: ['U10','U1000','U250','U500','U850','V10','V1000','V250','V500','V850']
#        file_name_prefix: "unet-03-wind"
#    save_options: {'dpi': 250,
#                   'format':'png'}
#    video_format: 'none'


pbs: # casper
    conda: "credit"
    job_name: 'downscale-test'
    nodes: 1
    ncpus: 8
    ngpus: 1
    mem: '128GB'
    walltime: '4:00:00'
    gpu_type: 'a100'
    project: 'NRIS0001'
    queue: 'casper'
